ATTENTION: Ceci est en cours de travaux. Ce r√©pertoire contient une exp√©rimentation 
concernant la s√©curisation des acc√®s √† GISMeaux. En cons√©quence de quoi, il est tr√®s 
peu recommand√© de l'utiliser, sauf si farfouiller dans du code PHP ne vous fait pas 
peur. Et encore.

Le but initial de cette branche est de tester de nouvelles id√©es et d'en discuter.

ATTENTION (suite) : Ceci est toujours en travaux puisque l'application doit rÈpondre 
aux attentes de ses utilisateurs!!
Il est maintenant recommandÈ de l'utiliser cette ensemble d'applications Ètant 
actuellement en production.
Toutefois les fichiers install.php et configuration.php sont livrÈs en l'Ètat (ils 
nous ont aucune utilitÈ notre site existant depuis 2004) et donc les retours d'expÈriences 
seront les bienvenus

PRINCIPALES MODIFICATIONS

* Regroupement des branches "intranet", "internet" et "test_ssl" 
  en une seule branche, nomm√©e "application".

* Rationalisation des inclusions. Les fichiers PHP 
  partag√©s se trouvent dans /inc, les fichiers appell√©s √† √™tre 
  modifi√©s √† l'installation sont dans /conf.

* Modularisation des routines de base de donn√©es. /inc/database.php 
  d√©finit d√©sormais une classe (DBpg) et une variable globale ($DB) 
  qui embarque les anciennes fonction "tab_result" et assimilÈes.

* Un m√™me ent√™te se trouve d√©sormais au d√©but de tous les 
  fichiers PHP inclus. Celui-ci s'assure que les fichiers 
  ne sont pas appell√©s directement.

* Un m√™me ent√™te se trouve d√©sormais au d√©but de tous les 
  autres fichiers PHP. Celui-ci positionne la constante 
  GIS_ROOT et se charge d'inclure les fichiers utiles (via common.php).

* Deux appels de fonction sont fournis pour la gestion des sessions.
       - Le premier, gis_session_start(), charge les donn√©es de la 
       session si besoin. Il doit √™tre appell√© au d√©but de chaque 
       fichier PHP non-inclus.
       - Le second, gis_init(), s'occupe en plus de v√©rifier 
       l'authentification et - en r√©sum√© - d'initialiser une nouvelle 
       session si besoin. Il ne doit √™tre appell√© QUE par les "points 
       d'entr√©e" de l'utilisateur dans le syst√®me (carto.php, 
       index.php, back_office.php, etc.).

* L'authentification s'appuie d√©sormais sur un syst√®me de "profils" 
  (/inc/profiles.php). Ceux-ci d√©rivent d'une classe "Profile" et 
  impl√©mentent divers m√©canismes.
       - Tout d'abord, ils fournissent une fonction qui permet de tester 
       si le profil s'applique ou non. Ainsi, on peut s√©lectionner un 
       profil diff√©rent selon que l'utilisateur se connecte depuis une 
       IP locale ou non, depuis une connexion s√©curis√©e ou non, etc.
       - Ensuite, ils fournissent une routine d'identification. Par 
       exemple, le "CertifiedProfile" (qui g√®re les authentifications 
       par certificat SSL) extrait le nom d'utilisateur du certificat. 
       Le profil par d√©faut (InternetProfile) positionne automatiquement 
       le nom d'utilisateur √† "Visiteur". Dans les cas qui s'y pr√™te, 
       cette √©tape r√©cup√®re aussi le mot de passe.
       - Enfin, ils v√©rifient par le moyen ad√©quat que l'utilisateur 
       est bien ce qu'il pr√©tend. Dans le cas d'un certificat client, 
       le simple fait d'avoir un certificat valide est une garantie suffisante. 
       Dans le cas d'une authentification sur LDAP, le protil tentera juste 
       de se connecter au serveur LDAP avec le login et le mot de passe fournis 
       lors de l'identification. Dans le cas du "InternetProfile", 
       l'authentification est automatiquement r√©ussie.

* L'utilisation de mapserv.php - interface √† PHP/Mapscript simulant 
  (partiellement) le comportement du CGI de Mapserver - en lieu 
  et place du-dit CGI. L'id√©e √©tant notamment de pouvoir int√©grer 
  un cache pour les rasters.

* Cr√©ation d'un /index.php visant √† fournir - √† terme - un point 
  d'entr√©e convivial vers les diff√©rentes fonctionnalit√©s. Un tel 
  point d'entr√©e devrait, notamment, modifier son contenu en 
  fonction du profil utilis√©. Pour le moment, il est majoritairement
  utilis√© √† des fins de d√©buguage.

* Transfert des "applications" (le cadastre uniquement, pour le moment)
  dans /apps. L'id√©e serait, √† terme, de mettre en place une inter-
  face commune aux diff√©rentes applications pour permettre l'ajout
  et la suppression "simple" de tels composants. Typiquement, une
  application devrait √™tre capable de renseigner d'elle-m√™me
  les tables utiles (permissions, etc.).

* Transfert des notions de commune par d√©faut et d'application 
  par d√©faut aux profils. Ceux-ci peuvent √©ventuellement d√©l√©guer
  cette s√©lection √† un composant tiers (DB, LDAP, etc.)

* D√©finit les permissions par rapport √† un r√¥le (chaque utilisateur pouvant 
  avoir plusieurs r√¥les) plut√¥t que par rapport √† l'utilisateur
  lui-m√™me. Ceci permettant de simplifier l'administration, 
  l'ajout d'un nouvel utilisateur se r√©sumant le plus souvent 
  √† le rattacher √† un r√¥le existant.

NOTES DIVERSES

* L'utilisation "simple" de la branche n√©cessite de faire pointer
  un h√¥te virtuel Apache vers /gismeaux/application.

* L'utilisation de l'authentification SSL n√©cessite l'ajout de
  directives dans Apache (SSLRequire optional) pour l'h√¥te
  virtuel SSL.

* L'authentification SSL n√©cessite √©galement de configurer une
  PKI minimaliste : une CA, un certificat serveur sign√© par 
  la-dite CA et un nombre quelconque de certificats clients 
  √©galement sign√©s par la CA. L'utilisation d'un outil comme
  XCA (http://xca.hohnstaedt.de/) peut √™tre d'une grande aide
  par rapport √† la manipulation manuelle des commandes OpenSSL.

* La configuration de la base de donn√©es reste - pour 
  l'essentiel - identique √† celle de la branche "normale" de
  l'application. Quelques tables suppl√©mentaires sont √† cr√©er
  dans admin_svg. (DATABASE.TXT)

TRUCS ENCORE A FAIRE (SELON LE TEMPS)

* Passer √† un "vrai" SRID (au lieu de -1), pour pouvoir √™tre interop√©rable.

* Construire un outil "int√©gr√©" de configuration initiale de la DB.